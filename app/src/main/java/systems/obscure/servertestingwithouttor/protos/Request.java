// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: ./pond.proto
package systems.obscure.servertestingwithouttor.protos;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;

/**
 * This protocol buffer file defines the protocol between Pond clients and
 * servers, and between clients directly.
 * A client/server transaction always takes exactly the same form:
 * First, the client sends a request to the server which is padded to a fixed
 * length. Then the server sends the reply, which is also padded. Finally,
 * the client securely closes the connection, which is a small message that
 * carries no payload.
 * Request is the client's request to the server. Only one of the optional
 * messages may be present in any Request.
 */
public final class Request extends Message {

  @ProtoField(tag = 1)
  public final NewAccount new_account;

  @ProtoField(tag = 2)
  public final Delivery deliver;

  @ProtoField(tag = 3)
  public final Fetch fetch;

  @ProtoField(tag = 4)
  public final Upload upload;

  @ProtoField(tag = 5)
  public final Download download;

  @ProtoField(tag = 6)
  public final SignedRevocation revocation;

  @ProtoField(tag = 7)
  public final HMACSetup hmac_setup;

  @ProtoField(tag = 8)
  public final HMACStrike hmac_strike;

  public Request(NewAccount new_account, Delivery deliver, Fetch fetch, Upload upload, Download download, SignedRevocation revocation, HMACSetup hmac_setup, HMACStrike hmac_strike) {
    this.new_account = new_account;
    this.deliver = deliver;
    this.fetch = fetch;
    this.upload = upload;
    this.download = download;
    this.revocation = revocation;
    this.hmac_setup = hmac_setup;
    this.hmac_strike = hmac_strike;
  }

  private Request(Builder builder) {
    this(builder.new_account, builder.deliver, builder.fetch, builder.upload, builder.download, builder.revocation, builder.hmac_setup, builder.hmac_strike);
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof Request)) return false;
    Request o = (Request) other;
    return equals(new_account, o.new_account)
        && equals(deliver, o.deliver)
        && equals(fetch, o.fetch)
        && equals(upload, o.upload)
        && equals(download, o.download)
        && equals(revocation, o.revocation)
        && equals(hmac_setup, o.hmac_setup)
        && equals(hmac_strike, o.hmac_strike);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = new_account != null ? new_account.hashCode() : 0;
      result = result * 37 + (deliver != null ? deliver.hashCode() : 0);
      result = result * 37 + (fetch != null ? fetch.hashCode() : 0);
      result = result * 37 + (upload != null ? upload.hashCode() : 0);
      result = result * 37 + (download != null ? download.hashCode() : 0);
      result = result * 37 + (revocation != null ? revocation.hashCode() : 0);
      result = result * 37 + (hmac_setup != null ? hmac_setup.hashCode() : 0);
      result = result * 37 + (hmac_strike != null ? hmac_strike.hashCode() : 0);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<Request> {

    public NewAccount new_account;
    public Delivery deliver;
    public Fetch fetch;
    public Upload upload;
    public Download download;
    public SignedRevocation revocation;
    public HMACSetup hmac_setup;
    public HMACStrike hmac_strike;

    public Builder() {
    }

    public Builder(Request message) {
      super(message);
      if (message == null) return;
      this.new_account = message.new_account;
      this.deliver = message.deliver;
      this.fetch = message.fetch;
      this.upload = message.upload;
      this.download = message.download;
      this.revocation = message.revocation;
      this.hmac_setup = message.hmac_setup;
      this.hmac_strike = message.hmac_strike;
    }

    public Builder new_account(NewAccount new_account) {
      this.new_account = new_account;
      return this;
    }

    public Builder deliver(Delivery deliver) {
      this.deliver = deliver;
      return this;
    }

    public Builder fetch(Fetch fetch) {
      this.fetch = fetch;
      return this;
    }

    public Builder upload(Upload upload) {
      this.upload = upload;
      return this;
    }

    public Builder download(Download download) {
      this.download = download;
      return this;
    }

    public Builder revocation(SignedRevocation revocation) {
      this.revocation = revocation;
      return this;
    }

    public Builder hmac_setup(HMACSetup hmac_setup) {
      this.hmac_setup = hmac_setup;
      return this;
    }

    public Builder hmac_strike(HMACStrike hmac_strike) {
      this.hmac_strike = hmac_strike;
      return this;
    }

    @Override
    public Request build() {
      return new Request(this);
    }
  }
}
