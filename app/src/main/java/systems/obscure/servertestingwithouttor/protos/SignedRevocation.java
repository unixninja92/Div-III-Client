// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: ./pond.proto
package systems.obscure.servertestingwithouttor.protos;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;
import okio.ByteString;

import static com.squareup.wire.Message.Datatype.BYTES;
import static com.squareup.wire.Message.Datatype.FIXED32;
import static com.squareup.wire.Message.Label.REQUIRED;

/**
 * SignedRevocation is a request for the server to store an update to the group
 * public key that revokes some sender. The server will reply with a revocation
 * for generation x when a delivery to that generation is requested.
 */
public final class SignedRevocation extends Message {

  public static final ByteString DEFAULT_SIGNATURE = ByteString.EMPTY;

  @ProtoField(tag = 1, label = REQUIRED)
  public final Revocation revocation;

  @ProtoField(tag = 2, type = BYTES, label = REQUIRED)
  public final ByteString signature;

  public SignedRevocation(Revocation revocation, ByteString signature) {
    this.revocation = revocation;
    this.signature = signature;
  }

  private SignedRevocation(Builder builder) {
    this(builder.revocation, builder.signature);
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof SignedRevocation)) return false;
    SignedRevocation o = (SignedRevocation) other;
    return equals(revocation, o.revocation)
        && equals(signature, o.signature);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = revocation != null ? revocation.hashCode() : 0;
      result = result * 37 + (signature != null ? signature.hashCode() : 0);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<SignedRevocation> {

    public Revocation revocation;
    public ByteString signature;

    public Builder() {
    }

    public Builder(SignedRevocation message) {
      super(message);
      if (message == null) return;
      this.revocation = message.revocation;
      this.signature = message.signature;
    }

    public Builder revocation(Revocation revocation) {
      this.revocation = revocation;
      return this;
    }

    public Builder signature(ByteString signature) {
      this.signature = signature;
      return this;
    }

    @Override
    public SignedRevocation build() {
      checkRequiredFields();
      return new SignedRevocation(this);
    }
  }

  public static final class Revocation extends Message {

    public static final Integer DEFAULT_GENERATION = 0;
    public static final ByteString DEFAULT_REVOCATION = ByteString.EMPTY;

    @ProtoField(tag = 1, type = FIXED32, label = REQUIRED)
    public final Integer generation;

    @ProtoField(tag = 2, type = BYTES, label = REQUIRED)
    public final ByteString revocation;

    public Revocation(Integer generation, ByteString revocation) {
      this.generation = generation;
      this.revocation = revocation;
    }

    private Revocation(Builder builder) {
      this(builder.generation, builder.revocation);
      setBuilder(builder);
    }

    @Override
    public boolean equals(Object other) {
      if (other == this) return true;
      if (!(other instanceof Revocation)) return false;
      Revocation o = (Revocation) other;
      return equals(generation, o.generation)
          && equals(revocation, o.revocation);
    }

    @Override
    public int hashCode() {
      int result = hashCode;
      if (result == 0) {
        result = generation != null ? generation.hashCode() : 0;
        result = result * 37 + (revocation != null ? revocation.hashCode() : 0);
        hashCode = result;
      }
      return result;
    }

    public static final class Builder extends Message.Builder<Revocation> {

      public Integer generation;
      public ByteString revocation;

      public Builder() {
      }

      public Builder(Revocation message) {
        super(message);
        if (message == null) return;
        this.generation = message.generation;
        this.revocation = message.revocation;
      }

      public Builder generation(Integer generation) {
        this.generation = generation;
        return this;
      }

      public Builder revocation(ByteString revocation) {
        this.revocation = revocation;
        return this;
      }

      @Override
      public Revocation build() {
        checkRequiredFields();
        return new Revocation(this);
      }
    }
  }
}
