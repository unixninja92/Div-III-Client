// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: ./pond.proto
package systems.obscure.servertestingwithouttor.protos;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;
import okio.ByteString;

import static com.squareup.wire.Message.Datatype.BYTES;
import static com.squareup.wire.Message.Label.REQUIRED;

/**
 * A SignedKeyExchange is a message that's sent between clients and exposed in
 * the UI. It's typically found in a PEM block with type "POND KEY EXCHANGE".
 */
public final class SignedKeyExchange extends Message {

  public static final ByteString DEFAULT_SIGNED = ByteString.EMPTY;
  public static final ByteString DEFAULT_SIGNATURE = ByteString.EMPTY;

  /**
   * signed contains a serialised KeyExchange message.
   */
  @ProtoField(tag = 1, type = BYTES, label = REQUIRED)
  public final ByteString signed;

  /**
   * signature contains an Ed25519 signature of |signed| by
   * |signed.public_key|.
   */
  @ProtoField(tag = 2, type = BYTES, label = REQUIRED)
  public final ByteString signature;

  public SignedKeyExchange(ByteString signed, ByteString signature) {
    this.signed = signed;
    this.signature = signature;
  }

  private SignedKeyExchange(Builder builder) {
    this(builder.signed, builder.signature);
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof SignedKeyExchange)) return false;
    SignedKeyExchange o = (SignedKeyExchange) other;
    return equals(signed, o.signed)
        && equals(signature, o.signature);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = signed != null ? signed.hashCode() : 0;
      result = result * 37 + (signature != null ? signature.hashCode() : 0);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<SignedKeyExchange> {

    public ByteString signed;
    public ByteString signature;

    public Builder() {
    }

    public Builder(SignedKeyExchange message) {
      super(message);
      if (message == null) return;
      this.signed = message.signed;
      this.signature = message.signature;
    }

    /**
     * signed contains a serialised KeyExchange message.
     */
    public Builder signed(ByteString signed) {
      this.signed = signed;
      return this;
    }

    /**
     * signature contains an Ed25519 signature of |signed| by
     * |signed.public_key|.
     */
    public Builder signature(ByteString signature) {
      this.signature = signature;
      return this;
    }

    @Override
    public SignedKeyExchange build() {
      checkRequiredFields();
      return new SignedKeyExchange(this);
    }
  }
}
