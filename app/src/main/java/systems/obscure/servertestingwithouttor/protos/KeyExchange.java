// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: ./pond.proto
package systems.obscure.servertestingwithouttor.protos;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;
import okio.ByteString;

import static com.squareup.wire.Message.Datatype.BYTES;
import static com.squareup.wire.Message.Datatype.STRING;
import static com.squareup.wire.Message.Datatype.UINT32;
import static com.squareup.wire.Message.Label.REQUIRED;

/**
 * KeyExchange is a message sent between clients to establish a relation. It's
 * always found inside a SignedKeyExchange.
 */
public final class KeyExchange extends Message {

  public static final ByteString DEFAULT_PUBLIC_KEY = ByteString.EMPTY;
  public static final ByteString DEFAULT_IDENTITY_PUBLIC = ByteString.EMPTY;
  public static final String DEFAULT_SERVER = "";
  public static final ByteString DEFAULT_DH = ByteString.EMPTY;
  public static final ByteString DEFAULT_DH1 = ByteString.EMPTY;
  public static final ByteString DEFAULT_GROUP = ByteString.EMPTY;
  public static final ByteString DEFAULT_GROUP_KEY = ByteString.EMPTY;
  public static final Integer DEFAULT_GENERATION = 0;

  /**
   * Ed25519 public key.
   */
  @ProtoField(tag = 1, type = BYTES, label = REQUIRED)
  public final ByteString public_key;

  /**
   * Curve25519 public key. (Used to tell the server which account to
   * deliver a message to.)
   * Note: in the most up-to-date revision of the Pond ratchet, this
   * should be equal to |public_key|, modulo isomorphism.
   */
  @ProtoField(tag = 2, type = BYTES, label = REQUIRED)
  public final ByteString identity_public;

  /**
   * The URL of this user's home server.
   */
  @ProtoField(tag = 3, type = STRING, label = REQUIRED)
  public final String server;

  /**
   * A Curve25519, initial Diffie-Hellman value.
   */
  @ProtoField(tag = 4, type = BYTES, label = REQUIRED)
  public final ByteString dh;

  /**
   * dh1 contains the second, curve25519, public key if the new-form
   * ratchet is being used.
   */
  @ProtoField(tag = 8, type = BYTES)
  public final ByteString dh1;

  /**
   * A serialised bbssig.Group.
   */
  @ProtoField(tag = 5, type = BYTES, label = REQUIRED)
  public final ByteString group;

  /**
   * A bbssig.PrivateKey to authorise message delivery.
   */
  @ProtoField(tag = 6, type = BYTES, label = REQUIRED)
  public final ByteString group_key;

  /**
   * The generation number of |group|.
   */
  @ProtoField(tag = 7, type = UINT32, label = REQUIRED)
  public final Integer generation;

  public KeyExchange(ByteString public_key, ByteString identity_public, String server, ByteString dh, ByteString dh1, ByteString group, ByteString group_key, Integer generation) {
    this.public_key = public_key;
    this.identity_public = identity_public;
    this.server = server;
    this.dh = dh;
    this.dh1 = dh1;
    this.group = group;
    this.group_key = group_key;
    this.generation = generation;
  }

  private KeyExchange(Builder builder) {
    this(builder.public_key, builder.identity_public, builder.server, builder.dh, builder.dh1, builder.group, builder.group_key, builder.generation);
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof KeyExchange)) return false;
    KeyExchange o = (KeyExchange) other;
    return equals(public_key, o.public_key)
        && equals(identity_public, o.identity_public)
        && equals(server, o.server)
        && equals(dh, o.dh)
        && equals(dh1, o.dh1)
        && equals(group, o.group)
        && equals(group_key, o.group_key)
        && equals(generation, o.generation);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = public_key != null ? public_key.hashCode() : 0;
      result = result * 37 + (identity_public != null ? identity_public.hashCode() : 0);
      result = result * 37 + (server != null ? server.hashCode() : 0);
      result = result * 37 + (dh != null ? dh.hashCode() : 0);
      result = result * 37 + (dh1 != null ? dh1.hashCode() : 0);
      result = result * 37 + (group != null ? group.hashCode() : 0);
      result = result * 37 + (group_key != null ? group_key.hashCode() : 0);
      result = result * 37 + (generation != null ? generation.hashCode() : 0);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<KeyExchange> {

    public ByteString public_key;
    public ByteString identity_public;
    public String server;
    public ByteString dh;
    public ByteString dh1;
    public ByteString group;
    public ByteString group_key;
    public Integer generation;

    public Builder() {
    }

    public Builder(KeyExchange message) {
      super(message);
      if (message == null) return;
      this.public_key = message.public_key;
      this.identity_public = message.identity_public;
      this.server = message.server;
      this.dh = message.dh;
      this.dh1 = message.dh1;
      this.group = message.group;
      this.group_key = message.group_key;
      this.generation = message.generation;
    }

    /**
     * Ed25519 public key.
     */
    public Builder public_key(ByteString public_key) {
      this.public_key = public_key;
      return this;
    }

    /**
     * Curve25519 public key. (Used to tell the server which account to
     * deliver a message to.)
     * Note: in the most up-to-date revision of the Pond ratchet, this
     * should be equal to |public_key|, modulo isomorphism.
     */
    public Builder identity_public(ByteString identity_public) {
      this.identity_public = identity_public;
      return this;
    }

    /**
     * The URL of this user's home server.
     */
    public Builder server(String server) {
      this.server = server;
      return this;
    }

    /**
     * A Curve25519, initial Diffie-Hellman value.
     */
    public Builder dh(ByteString dh) {
      this.dh = dh;
      return this;
    }

    /**
     * dh1 contains the second, curve25519, public key if the new-form
     * ratchet is being used.
     */
    public Builder dh1(ByteString dh1) {
      this.dh1 = dh1;
      return this;
    }

    /**
     * A serialised bbssig.Group.
     */
    public Builder group(ByteString group) {
      this.group = group;
      return this;
    }

    /**
     * A bbssig.PrivateKey to authorise message delivery.
     */
    public Builder group_key(ByteString group_key) {
      this.group_key = group_key;
      return this;
    }

    /**
     * The generation number of |group|.
     */
    public Builder generation(Integer generation) {
      this.generation = generation;
      return this;
    }

    @Override
    public KeyExchange build() {
      checkRequiredFields();
      return new KeyExchange(this);
    }
  }
}
